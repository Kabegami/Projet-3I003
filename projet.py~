import numpy as np


def delta(a, b):
    if a == b:
        return 0
    else:
        return 1


def cout1(x, y, gap=1):
    m, n = len(x), len(y)
    F = np.zeros((m+1, n+1), dtype=int)
    for i in range(1, m+1):
        F[i, 0] = i * gap
    for j in range(1, n+1):
        F[0, j] = j * gap
    for i in range(1, m+1):
        for j in range(1, n+1):
            F[i, j] = min(F[i-1, j-1] + delta(x[i-1], y[j-1]),
                          F[i-1, j] + gap,
                          F[i, j-1] + gap)
    return F


def sol1(x, y, F, gap=1):
    i, j = len(x), len(y)
    M = []
    while (i, j) != (0, 0):
        if i > 0 and j > 0 and F[i, j] == F[i-1, j-1] + delta(x[i-1], y[j-1]):
            M.append((i, j))
            i, j = i-1, j-1
        elif i > 0 and F[i, j] == F[i-1, j] + gap:
            i -= 1
        else:
            j -= 1
    M.reverse()
    return M


def affiche(x, y, M):
    M.append((len(x)+1, len(y)+1))
    i, j = 1, 1
    sx, sy = '', ''
    for (u, v) in M:
        while i < u and j < v:
            sx = sx + x[i-1]
            sy = sy + y[j-1]
            i, j = i+1, j+1
        while i < u:
            sx = sx + x[i-1]
            sy = sy + '-'
            i += 1
        while j < v:
            sx = sx + '-'
            sy = sy + y[j-1]
            j += 1
    print(sx)
    print(sy)


# test

x = 'GTTCACTACTGCATT'
y = 'TCCAGAACTTGCAT'
print('x :', x)
print('y :', y)

F = cout1(x, y)
print('cout total :', F[len(x), len(y)])

M = sol1(x, y, F)
print('alignements :', M)

affiche(x, y, M)
