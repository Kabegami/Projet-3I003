#!/usr/bin/python
# -*- coding: utf-8 -*-
import os

def lire_sequence(fichier):
    os.chdir('test')
    f = open(fichier,'r')
    sequence = f.read()
    L = sequence.splitlines()
    L2 = []
    L2.append(int(L[0])-1)
    L2.append(int(L[1])-1)
    L2.append(L[2].replace(" ",""))
    L2.append(L[3].replace(" ",""))
    if (L2[0]) < 100 and L2[1] < 100:
        print(L2[2])
        print(L2[3])
    return L2
    f.close()

def cout(v1,v2,cout_dif):
    if v1 != v2:
        return cout_dif
    return 0
    
def cout1Naif(c1,c2,t1,t2,cout_gap,cout_dif,dico):
    if t1 == t2 and t1 == 0:
        return cout(c1[t1],c2[t2],cout_dif)
    if t1 == 0:
        return t2*cout_gap
    if t2 == 0:
        return t1*cout_gap #y a t-il une rÃ©utilisation de variable
    return min(cout1Naif(c1,c2,t1-1,t2-1,1,1,dico) + cout(c1[t1],c2[t2],cout_dif),
               cout1Naif(c1,c2,t1,t2-1,1,1,dico) + cout_gap,
               cout1Naif(c1,c2,t1-1,t2,1,1,dico) + cout_gap)

def cout1(c1,c2,t1,t2,cout_gap,cout_dif,dico):
    if (t1, t2) in dico:
        #print (t1,t2), "in dico"
        return dico[(t1, t2)]
    if t1 == t2 and t1 == 0:
        dico[(t1, t2)] = cout(c1[t1],c2[t2],cout_dif)
        return dico[(t1, t2)]
    if t1 == 0:
        dico[(0, t2)] = t2*cout_gap
        return dico[(0, t2)]
    if t2 == 0:
        dico[(t1, 0)] = t1*cout_gap
        return dico[(t1, 0)]
    
    dico[(t1,t2)] = min(cout1(c1,c2,t1-1,t2-1,1,1,dico) + cout(c1[t1],c2[t2],cout_dif),
               cout1(c1,c2,t1,t2-1,1,1,dico) + cout_gap,
               cout1(c1,c2,t1-1,t2,1,1,dico) + cout_gap)
    #print (t1,t2), dico[(t1, t2)]
    return dico[(t1,t2)]
        
def sol1(t1,t2,cout_gap,cout_dif,dico):
    L = []
    i = t1
    j = t2
    cout = dico[(t1, t2)]
    #print ("cout : ", cout)

    # a chaque ajout dans la liste, on soustrait le cout de la paire ajoutee
    while i > 0:
        while j > 0:
            if dico[i-1, j-1] <= dico[i, j-1] and dico[i-1, j-1] <= dico[i-1, j]:
                if dico[(i-1, j-1)] <= cout:
                    L.append((i-1, j-1))
                    print ("J'ajoute", i-1, j-1, "vaut", dico[(i-1, j-1)])
                    #if dico[(i-1, j-1)] < cout:
                    cout = cout - dico[(i-1, j-1)]
                   # print ("cout : ", cout)
                i = i-1
                j = j-1
            elif dico[i, j-1] <= dico[i-1, j-1] and dico[i, j-1] <= dico[i-1, j]:
                if dico[(i, j-1)] <= cout:
                    print ("J'ajoute", i, j-1, "vaut", dico[(i, j-1)])
                    L.append((i, j-1))
                    #if dico[(i, j-1)] < cout:
                    cout = cout - dico[(i, j-1)]
                    #print ("cout : ", cout)
                j = j-1
            elif dico[i-1, j] <= dico[i-1, j-1] and dico[i-1, j] <= dico[i, j-1]:
                if dico[(i-1, j)] <= cout:
                    print ("J'ajoute", i-1, j, "vaut", dico[(i-1, j)])
                    L.append((i-1, j))
                    #if dico[(i-1, j)] < cout:
                    cout = cout - dico[(i-1, j)]
                    #print ("cout : ", cout)
                i = i-1
            else:
                print ("hello")
    L.reverse()
    return L


def afficheAlignement(c1, c2, t1, t2, align):
    nbGaps = 0
    for k in range(len(align)):
        i = align[k][0]
        j = align[k][1]
        if (i > j):

            # il faut decaler les indices de "decoupage" avec le nombre de gaps ajoutes
            j += nbGaps
            
            # cas ou x_j est dans l'alignement ou pas
            if (j == align[k-1][0]):
                nbGaps += i-j-1
                c2 = c2[:j] + (i-j-1) * '-'  + c2[j:]
            else:
                nbGaps += i-j
                c2 = c2[:j] + (i - j) * '-'  + c2[j:]
            
    # si le dernier indice dans l'alignement est < la taille de la chaine
    gapFin = align[len(align)-1][0]
    if gapFin < t1:
        c2 = c2 + (t1 - gapFin)*'-'

    print(c1)
    print(c2)


if __name__ == "__main__":
    L = lire_sequence("Inst_0000010_44.adn")
    #L = lire_sequence("Inst_0000100_3.adn")
    dico = dict()
    c = cout1(L[2],L[3],L[0],L[1],1,1,dico)
    print(c)
    #print L[0], L[1]
    #for i in dico:
    '''
    print ((98, 88), dico[(98, 88)])
    print ((97, 87), dico[(97, 87)])
    print ((98, 87), dico[(98, 87)])
    print ((97, 88), dico[(97, 88)])
    '''
    align = sol1(L[0],L[1],1,1,dico)
    print ("------- Alignement M : -------")
    print (align)
    print ("------------------------------")
    afficheAlignement(L[2], L[3], L[0], L[1], align)
    
